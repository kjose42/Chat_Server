HTTPChatServer.java
    - sets up server
    - code takes port as input
    
Clients can connect to the server with the right address and port
  - client_test_1.py is an example of a client
      - python code takes the input of address, port, username, passsword, message
          + address and port is intended to be the server's address and port
          + username and password is the client's login credentials
          + message is the text that the client wants to send to chat
          
credentials.txt
    - stores valid username, password pairs

chat.html
    - html code for chat page
    - clients can see chat messages from this page and post their own chat messages

login.html
    - html code for login page
    - page used so that clients can log in to the server
    
error.html
    - html for error page
    - server sends this page if the client attempts to login with an invalid username 
      and password, or if the client attempts to access the chat page without logging 
      in
      
======================================================================================
======================================================================================
      
4 interactions can occur between server and client:

    - Interaction 1: client sends a GET message requesting the login page
        - client message contains login.html URL
        - server sends login.html
    
    - Interaction 2: client sends a POST message requesting the login page
        - client message contains the login.html URL, username, and password
        - client is attempting to login to the server
        - if the client sends a valid username and password
            + server stores a cookie for the client
            + server sends login.html and the client's cookie
        - if the client sends an invalid username and password
            + server sends error.html with a 401 error
    
    - Interaction 3: client sends a GET message requesting the chat page
        - client message contains chat.html URL
        - server sends chat.html
        
    - Interaction 4: client sends a POST message requesting the chat page
        - client contains the chat.html URL, client's message, and cookie
        - client is attempting to post text to the chat
        - chat.html can only be accessed if the client has correctly logged in 
            + (aka if the client has an existing cookie)
        - if the client doesnt have a valid cookie
            + server sends error.html with a 401 error
        - the message's format in the chat UI is <username>:<message>
        - client messages are stored in allMessages.txt 
            + allMessages.txt will be created once the first chat message has been posted
        - server sends chat.html, client's cookie, and all the chat messages
